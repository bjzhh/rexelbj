#_*_ coding:utf-8 _*_

'''
Created on 2018年9月13日

@author: xiaolin
'''

import numpy as np
import pandas as pd

#显示所有列
pd.set_option('display.max_columns', None)
#显示所有行
pd.set_option('display.max_rows', None)
#设置value的显示长度为100，默认为50
pd.set_option('max_colwidth',100)

df = pd.DataFrame(pd.read_csv('tags.csv',header=1))

df = pd.DataFrame(
    {
        "id":[1001,1002,1003,1004,1005,1006],
        "date":pd.date_range('20130102', periods=6),
        "city":['Beijing ', 'SH', ' guangzhou ', 'Shenzhen', 'shanghai', 'BEIJING '],
        "age":[23,44,54,32,34,45],
        "category":['100-A','100-B','110-A','110-C','210-A','130-F'],
        "price":[1200.9,np.nan,2133,5433.2,np.nan,4432]
    },
    columns =['id','date','city','category','age','price'])

df1 = pd.DataFrame({
        "id":[1001,1002,1003,1004,1005,1006,1007,108],
        "gender":['male','female','male','female','male','female','male','female'],
        "pay":['Y','N','Y','Y','N','Y','N','Y',],
        "m-point":[10,12,20,40,40,40,30,20]})

if __name__ == '__main__':
    print('********************************')
    print('一、信息表信息查看')
    print('********************************')
    print('查看前2行')
    print(df.head(2))
    print('===============================')
    print('查看后2行')
    print(df.tail(2))
    print('===============================')
    print('维度查看')
    print(df.shape)
    print('===============================')
    print('数据表基本信息（维度、列名称、数据格式、所占空间等）')
    print(df.info())
    print('===============================')
    print('每一列数据的格式')
    print(df.dtypes)
    print('===============================')
    print('category列格式')
    print(df['category'].dtype)
    print('===============================')
    print('空值')
    print(df.isnull())
    print('===============================')
    print('查看price列空值')
    print(df['price'].isnull())
    print('===============================')
    print('查看age列的唯一值')
    print(df['age'].unique())
    print('===============================')
    print('查看数据表的值')
    print(df.values)
    print('===============================')
    print('查看列名称')
    print(df.columns)
    print('===============================')
    print('********************************')
    print('二、数据表清洗 ')
    print('********************************')
    print('使用列prince的均值对NA进行填充')
    print(df)
    print(df.fillna(value=100))
    print( df['price'].fillna(df['price'].mean()) )
    print('===============================')
    print('清除city字段的字符前后空格,字符的大小写转换')
    df['city']=df['city'].map(str.strip)
    #大小写转换（小写lower）
    df['city'] = df['city'].map(str.upper)
    print( df )
    print('===============================')
    print('更改数据格式')
    print(df['price'].fillna(value=100).astype('int'))
    print('===============================')
    print('更改列名称')
    print(df.rename(columns={'category': 'category-size'}))
    print('===============================')
    print('删除后出现的重复值')
    print(df['city'].drop_duplicates())
    print('===============================')
    print('数据替换')
    df['city'] = df['city'].replace('SH', 'shanghai')
    print(df)
    print('===============================')
    print('********************************')
    print('三、数据预处理 ')
    print('********************************')
    print('内连接')
    df_inner=pd.merge(df,df1,how='inner')   # 匹配合并，交集
    print( df_inner )
    print('===============================')
    print('左连接')
    df_left=pd.merge(df,df1,how='left')     # 左关联
    print( df_left )
    print('===============================')
    print('右连接')
    df_right=pd.merge(df,df1,how='right')   # 右关联
    print( df_right )
    print('===============================')
    print('外连接')
    df_outer=pd.merge(df,df1,how='outer')   # 外连接
    print( df_outer )
    print('===============================')
    print('设置索引列')
    df_outer.set_index('id')
    df_outer = df_outer.sort_values('age')
    #df_outer = df_outer.sort_index()
    print(df_outer)
    print('===============================')
    print('如果price列的值>3000，group列显示high，否则显示low')
    df_outer['group'] = np.where(df_outer['price'] > 3000,'high','low')
    print(df_outer)
    print('===============================')
    print('对复合多个条件的数据进行分组标记')
    df_inner.loc[(df_inner['city'].map(str.lower) == 'beijing') & (df_inner['price'] >= 4000), 'sign'] = 1
    print(df_inner)
    print('===============================')
    print('对category字段的值依次进行分列，并创建数据表，索引值为df_inner的索引列，列名称为category和size')
    split = pd.DataFrame(
        (x.split('-') for x in df_inner['category']),
        index=df_inner.index,
        columns=['category','size'])
    print("split")
    print(split)
    print('===============================')
    print('将完成分裂后的数据表和原df_inner数据表进行匹配')
    df_inner=pd.merge(df_inner,split,right_index=True, left_index=True)
    print( df_inner )
    print('===============================')
    print('********************************')
    print('四、数据提取')
    print('********************************')
    print('按索引提取单行的数值')
    print( df_inner.loc[0] )
    print('===============================')
    print('按索引提取区域行数值')
    print( df_inner.iloc[0:2] )
    print('===============================')
    print('重设索引')
    df_inner.reset_index()
    print('===============================')
    print('设置日期为索引')
    df_inner=df_inner.set_index('date')
    print('===============================')
    print('提取4日之前的所有数据')
    print( df_inner[:'2013-01-04'] )
    print('===============================')
    print('使用iloc按位置区域提取数据')
    print(df_inner.iloc[:2,:2]) #冒号前后的数字不再是索引的标签名称，而是数据所在的位置，从0开始，前三行，前两列。
    print('===============================')
    print('适应iloc按位置单独提起数据')
    print( df_inner.iloc[[0,2,5],[4,5]]  )#提取第0、2、5行，4、5列
    print('===============================')
    print('使用ix按索引标签和位置混合提取数据')
    print(df_inner.ix[:'2013-01-03',:4] )#2013-01-03号之前，前四列数据
    print('===============================')
    print('判断city列的值是否为北京')
    print(df_inner['city'].isin(['BEIJING']))
    print('===============================')
    print('判断city列里是否包含beijing和shanghai，然后将符合条件的数据提取出来')
    print(df_inner.loc[df_inner['city'].isin(['BEIJING','shanghai'])])
    print('===============================')
    print('提取前三个字符，并生成数据表')
    test = pd.DataFrame(df['category'].str[:3])
    print(test)
    print('===============================')
    print('********************************')
    print('五、数据筛选')
    print('********************************')
    print('找出年龄大于25并且在beijing的记录')
    print(df.loc[
        (df['age'] > 25) & (df['city'].str.lower() == 'beijing'),
        ['id','city','age','category','price']])
    print('===============================')
    print('找出年龄大于35或者在beijing的记录')
    print('===============================')
    print(df.loc[
        (df['age'] > 35) | (df['city'].str.lower() == 'beijing'),
        ['id','city','age','category','price']])
    print('===============================')
    print('找出不在beijing的记录,对筛选后的数据按city列进行计数')
    print('===============================')
    test = df.loc[
            (df['city'].str.lower() != 'beijing'),
            ['id','city','age','category','price']]
    print(test)
    print('总数：'+str(test.sort_values(['age'],ascending = False).city.count()))
    print('===============================')
    print('使用query函数进行筛选')
    print('===============================')
    test = df.query('city == ["BEIJING", "shanghai"]')
    print(test)
    print('===============================')
    print('对筛选后的结果按prince进行求和')
    print('===============================')
    print( df.query('city == ["BEIJING", "shanghai"]').price.sum() )
    print('===============================')
    print('********************************')
    print('六、数据汇总')
    print('********************************')
    print('对所有的列进行计数汇总')
    print('===============================')
    print( df.groupby('city').count() )
    print('===============================')
    print('按城市对id字段进行计数')
    print('===============================')
    print( df.groupby('city')['id'].count() )
    print('===============================')
    print('对两个字段进行汇总计数')
    print('===============================')
    print( df.groupby(['city','age'])['id'].count() )
    print('===============================')
    print('对city字段进行汇总，并分别计算prince的合计和均值')
    print('===============================')
    print( df.groupby('city')['price'].agg([len,np.sum, np.mean]) )
    print('===============================')
    print('********************************')
    print('七、数据统计')
    print('********************************')
    print('简单的数据采样 ')
    print('===============================')
    print( df_inner.sample(n=3) )
    print('===============================')
    print('手动设置采样权重 ')
    print('===============================')
    weights = [0, 0.1, 0.7, 0, 0.2, 0.1]
    print( df.sample(n=2, weights=weights) )
    print('===============================')
    print('采样后不放回')
    print('===============================')
    print( df.sample(n=6, replace=False) )
    print('===============================')
    print('采样后放回')
    print('===============================')
    print( df.sample(n=6, replace=True) )
    print('===============================')
    print('数据表描述性统计')
    print('===============================')
    #round函数设置显示小数位，T表示转置
    print( df.describe().round(2).T )
    print('===============================')
    print('计算列的标准差')
    print('===============================')
    print( df['price'].std() )
    print('===============================')
    print('计算两个字段间的协方差')
    print('===============================')
    print( df['price'].cov(df_inner['age'])  )
    print('===============================')
    print('数据表中所有字段间的协方差')
    print('===============================')
    print( df.cov() )
    print('===============================')
    print('两个字段的相关性分析')
    print('===============================')
    ##相关系数在-1到1之间，接近1为正相关，接近-1为负相关，0为不相关
    print( df['price'].corr(df_inner['age']) )
    print('===============================')
    print('数据表的相关性分析')
    print('===============================')
    print( df.corr() )
    print('===============================')
    print('********************************')
    print('八、数据输出')
    print('********************************')
    print('数据导出：写入Excel')
    #此处不知道什么原因，将内容写入到.xlsx文件中一直存在问题
    df.to_excel('excel_to_python.xls',sheet_name='test1')
    print('写入成功')
    print('===============================')
    print('数据导出：写入到CSV')
    df.to_csv('excel_to_python.csv')
    print('写入成功')
    print('===============================')
